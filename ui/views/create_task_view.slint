// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { Date, Time, LineEdit, TimePickerPopup, DatePickerPopup, VerticalBox, Button } from "std-widgets.slint";
import { MyComboBox } from "../common.slint";
import { IconButton } from "../widgets/icon_button.slint";
import { TextButton } from "../widgets/text_button.slint";
import { Icons, FontSettings, TodoPalette, SpaceSettings } from "../widgets/styling.slint";
import { TaskSlintStruct } from "../adapters/task_adapter.slint";

// export global CreateTaskAdapter {
//     // in-out property <Date> due-date: { year: 2024, month: 12, day: 24 };
//     // in-out property <Time> due-time: { hour: 12, minute: 45, second: 0 };

//     // callback create(/* title */ string, /* due-date-time */ int);
//     // callback back();
//     callback cancel_operation();
//     callback create_task();
//     callback update_task();
//     callback changed_field(string, string) -> bool;
//     callback changed_float(string, float) -> bool;
//     in-out property <int> index;
//     in-out property <string> display_mode: "Create";
//     in-out property <TaskSlintStruct> task;

//     pure callback date-string(Date) -> string;
//     pure callback time-string(Time) -> string;
//     pure callback current-date() -> Date;
//     pure callback current-time() -> Time;
//     pure callback time-stamp(/* date */ Date, /* time */ Time) -> int;

//     // dummy implementation for live preview
//     date-string(due-date) => {
//         "Sat, Jun 1, 2024"
//     }

//     // dummy implementation for live preview
//     time-string(due-time) => {
//         "09:00"
//     }
// }

export component CreateTaskView {
    callback cancel_operation();
    callback create_task();
    callback update_task();
    callback changed_field(string, string) -> bool;
    callback changed_float(string, float) -> bool;
    in-out property <int> index;
    in-out property <string> display_mode: "Create";
    in-out property <TaskSlintStruct> task;

    VerticalBox {
        padding: 10px;
        alignment: start;
         HorizontalLayout {
            IconButton {
                icon: Icons.close;
                accessible-label: @tr("Cancel New Task Creation");

                clicked => {
                    cancel_operation();
                }
            }

            // spacer
            Rectangle { }


            Button {
                text: @tr("Create");
                enabled: title-input.text != "";
                primary: true;

                clicked => {
                    if display_mode == "Create" {
                        create_task();
                    } else {
                        update_task();
                    }
                }               
            }
        }

        VerticalLayout {
            spacing: SpaceSettings.default-spacing;

            title-label := Text {
                text: @tr("Task name");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }

            // spacer
            Rectangle { }

            title-input := LineEdit {
                placeholder-text: @tr("Describe your task");
                accessible-label: title-label.text;
            }
        // }

        // VerticalLayout {
        //     spacing: SpaceSettings.default-spacing;

            priority-label := Text {
                text: @tr("Priority");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }

            // spacer
            Rectangle { }

            priority-input := MyComboBox {
                value: @tr("low");
                choices: [@tr("low"), @tr("med"), @tr("high")];
            }
        

            Text {
                text: @tr("Due date");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }
            // spacer
            Rectangle { }
            date-input := LineEdit {
                placeholder-text: @tr("date your task is due");
                accessible-label: title-label.text;
            }

        HorizontalLayout {
            spacing: SpaceSettings.default-spacing;

            // TextButton {
            //     text: task.due-date;

            //     clicked => {
            //         date-picker.show();
            //     }
            // }

            // TextButton {
            //     text: CreateTaskAdapter.time-string(CreateTaskAdapter.due-time);
            //     horizontal-stretch: 0;

            //     clicked => {
            //         time-picker.show();
            //     }
            // }
        }

        Rectangle { }
        }
    }

    // date-picker := DatePickerPopup {
    //     x: (root.width - 360px) / 2;
    //     y: (root.height - 524px) / 2;
    //     width: 360px;
    //     height: 524px;

    //     accepted(date) => {
    //         task.due-date = date;
    //     }
    // }

    // time-picker := TimePickerPopup {
    //     x: (root.width - 340px) / 2;
    //     y: (root.height - 500px) / 2;
    //     width: 340px;
    //     height: 500px;

    //     accepted(time) => {
    //         CreateTaskAdapter.due-time = time;
    //     }
    // }

    // function reset() {
    //     title-input.text = "";
    //     CreateTaskAdapter.due-date = CreateTaskAdapter.current-date();
    //     CreateTaskAdapter.due-time = CreateTaskAdapter.current-time();
    // }

    // function create() {
    //     CreateTaskAdapter.back();
    //     CreateTaskAdapter.create(title-input.text, CreateTaskAdapter.time-stamp(CreateTaskAdapter.due-date, CreateTaskAdapter.due-time));
    //     root.reset();
    // }
}
