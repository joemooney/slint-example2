// import { MissionListView, MissionListAdapter } from "./views/mission_list_view.slint";
import { MissionListView } from "./views/mission_list_view.slint";
// export { MissionListAdapter }

import { CreateMissionView } from "./views/create_mission_view.slint";
import { MissionSlintStruct } from "./adapters/mission_adapter.slint";
// import { MissionAdapter, MissionSlintStruct } from "./adapters/mission_adapter.slint";
// export { MissionAdapter }

import { PowerPresetSlintStruct } from "./adapters/power_adapter.slint";
import { PowerPresetListView } from "./views/power_preset_list_view.slint";
// import { PowerPresetListView, PowerPresetListAdapter } from "./views/power_preset_list_view.slint";
// export { PowerPresetListAdapter }

import { CreatePowerPresetView } from "./views/create_power_preset_view.slint";
import { PowerPresetAdapter } from "./adapters/power_adapter.slint";
export { PowerPresetAdapter }

import { FrequencyPresetSlintStruct } from "./adapters/frequency_adapter.slint";
import { FrequencyPresetListView } from "./views/frequency_preset_list_view.slint";
// import { FrequencyPresetListAdapter } from "./views/frequency_preset_list_view.slint";
// export { FrequencyPresetListAdapter }

import { CreateFrequencyPresetView } from "./views/create_frequency_preset_view.slint";
import { FrequencyPresetAdapter } from "./adapters/frequency_adapter.slint";
export { FrequencyPresetAdapter }

import { TaskListView } from "./views/task_list_view.slint";

import { CreateTaskView } from "./views/create_task_view.slint";
import { TaskSlintStruct } from "./adapters/task_adapter.slint";

import { AnimationSettings } from "./widgets/styling.slint";
import { Tabs } from "tabs.slint";
import { TabWidget } from "std-widgets.slint";
import { Tab1 } from "tab1.slint";


export component MainWindow inherits Window {
    preferred-width: 600px;
    preferred-height: 600px;
    title: "Radio Configuration Tool";
    //======================================================================================
    in-out property <string> power_preset_display_mode;
    in-out property <int> power_preset_index;
    in-out property <bool> show_power_preset_list: true;
    in-out property <[PowerPresetSlintStruct]> power_presets: [
        // this is only dummy data for the preview
        { preset_name: "dummy_power1", preset_desc: "power#1", preset_details: "Nominal|band1" },
        { preset_name: "dummy_power2", preset_desc: "power#2", preset_details: "Nominal|band2" },
        { preset_name: "dummy_power3", preset_desc: "power#3", preset_details: "Nominal|band3" },
    ];
    in-out property <[string]> power_preset_names: ["dummy_preset1", "dummy_preset2", "dummy_preset3"];
    in-out property <PowerPresetSlintStruct> power_preset;
    in-out property <PowerPresetSlintStruct> default_power_preset: { preset_name: "", preset_desc: "", preset_details: "Nominal" };
    callback create_power_preset();
    callback update_power_preset();
    callback s2r_check_power_preset_field(PowerPresetSlintStruct, string, string) -> PowerPresetSlintStruct;
    callback s2r_change_power_preset_float_value(PowerPresetSlintStruct, string, float) -> PowerPresetSlintStruct;
    callback s2r_change_power_preset_int_value(PowerPresetSlintStruct, string, int) -> PowerPresetSlintStruct;
    callback s2r_create_power_preset(PowerPresetSlintStruct);
    callback s2r_update_power_preset(int, PowerPresetSlintStruct);
    callback s2r_remove_power_preset(int);
    //======================================================================================
    in-out property <string> frequency_preset_display_mode;
    in-out property <int> frequency_preset_index;
    in-out property <bool> show_frequency_preset_list: true;
    in-out property <[FrequencyPresetSlintStruct]> frequency_presets: [
        // this is only dummy data for the preview
        { preset_name: "dummy_frequency1", preset_desc: "frequency#1", preset_details: "Nominal|band1" },
        { preset_name: "dummy_frequency2", preset_desc: "frequency#2", preset_details: "Nominal|band2" },
        { preset_name: "dummy_frequency3", preset_desc: "frequency#3", preset_details: "Nominal|band3" },
    ];
    in-out property <[string]> frequency_preset_names: ["dummy_preset1", "dummy_preset2", "dummy_preset3"];
    in-out property <FrequencyPresetSlintStruct> frequency_preset;
    in-out property <FrequencyPresetSlintStruct> default_frequency_preset: { preset_name: "", preset_desc: "", preset_details: "Nominal" };
    callback create_frequency_preset();
    callback update_frequency_preset();
    callback s2r_check_frequency_preset_field(FrequencyPresetSlintStruct, string, string) -> FrequencyPresetSlintStruct;
    callback s2r_change_frequency_preset_float_value(FrequencyPresetSlintStruct, string, float) -> FrequencyPresetSlintStruct;
    callback s2r_change_frequency_preset_float_values(FrequencyPresetSlintStruct, string, string) -> FrequencyPresetSlintStruct;
    callback s2r_create_frequency_preset(FrequencyPresetSlintStruct);
    callback s2r_update_frequency_preset(int, FrequencyPresetSlintStruct);
    callback s2r_remove_frequency_preset(int);
    //======================================================================================
    in-out property <string> mission_display_mode;
    in-out property <int> mission_index;
    in-out property <bool> show_mission_list: true;
    in-out property <[MissionSlintStruct]> missions: [
        // this is only dummy data for the preview
        { mission_name: "dummy_mission1", mission_desc: "mission#1", mission_id: 1, mission_details: "Nominal|band1" },
        { mission_name: "dummy_mission2", mission_desc: "mission#2", mission_id: 2, mission_details: "Nominal|band2" },
        { mission_name: "dummy_mission3", mission_desc: "mission#3", mission_id: 3, mission_details: "Nominal|band3" },
    ];
    in-out property <MissionSlintStruct> mission;
    in-out property <MissionSlintStruct> default_mission: { mission_name: "", mission_desc: "", mission_id: 0, mission_details: "Nominal" };

    callback create_mission();
    callback update_mission();
    callback s2r_check_mission_field(MissionSlintStruct, string, string) -> MissionSlintStruct;
    callback s2r_create_mission(MissionSlintStruct);
    callback s2r_update_mission(int, MissionSlintStruct);
    callback s2r_remove_mission(int);
    //======================================================================================
    in-out property <string> task_display_mode;
    in-out property <int> task_index;
    in-out property <bool> show_task_list: true;
    in-out property <[TaskSlintStruct]> tasks: [
        // this is only dummy data for the preview
        { title: "dummy_task1", priority: "low", description: "task#1", due_date: "1/1/1", done: false },
        { title: "dummy_task2", priority: "low", description: "task#2", due_date: "1/1/1", done: false },
        { title: "dummy_task3", priority: "low", description: "task#3", due_date: "1/1/1", done: false },
    ];
    in-out property <TaskSlintStruct> task;
    in-out property <TaskSlintStruct> default_task: { title: "", priority: "", description: "", due_date: "", done: false };

    callback create_task();
    callback update_task();
    callback s2r_check_task_field(TaskSlintStruct, string, string) -> TaskSlintStruct;
    callback s2r_create_task(TaskSlintStruct);
    callback s2r_update_task(int, TaskSlintStruct);
    callback s2r_remove_task(int);
    //======================================================================================

    // Tabs {}
    TabWidget {
        // Tab {
        //     title: "General";
        //     Tab1 {}
        // }
        Tab {
            title: "Missions";
            Rectangle {
                if show_mission_list  : mission_list_view := MissionListView {
                    missions <=> missions;
                    width: 100%;
                    height: 100%;
                    show_edit_mission(idx) => {
                        debug("Edit mission", idx);
                        mission_index = idx;
                        mission = missions[idx];
                        debug("Edit mission", mission);
                        show_mission_list = false;
                        mission_display_mode = "Update";
                    }
                    show_create_mission => {
                        show_mission_list = false;
                        mission = default_mission;
                        mission_display_mode = "Create";
                    }
                }

                if !show_mission_list  : create_mission_view := CreateMissionView {
                    mode <=> mission_display_mode;
                    mission <=> mission;
                    power_preset_names <=> power_preset_names;
                    width: 100%;
                    height: 100%;
                    cancel_operation => {
                        show_mission_list = true;
                    }
                    create_mission => {
                        debug("index.slint create mission", mission);
                        s2r_create_mission(mission);
                        show_mission_list = true;
                    }
                    update_mission => {
                        debug("index.slint update mission", mission);
                        s2r_update_mission(mission_index, mission);
                        show_mission_list = true;
                    }
                    changed_field(field_name, value) => {
                        debug("index.slint update mission", mission);
                        s2r_check_mission_field(mission, field_name, value);
                        // power_preset = mission.power-model;
                        return true;
                    }
                }
            }
        }
        Tab {
            title: "Power Presets";
            Rectangle {
                if show_power_preset_list  : power_preset_list_view := PowerPresetListView {
                    presets <=> power_presets;
                    width: 100%;
                    height: 100%;
                    show_edit_power_preset(idx) => {
                        debug("Edit power_preset", idx);
                        power_preset_index = idx;
                        power_preset = power_presets[idx];
                        debug("Edit power_preset", power_preset);
                        show_power_preset_list = false;
                        power_preset_display_mode = "Update";
                    }
                    remove_power_preset(idx) => {
                        debug("index.slint remove power_preset:{idx}");
                        s2r_remove_power_preset(power_preset_index);
                    }
                    show_create_power_preset => {
                        show_power_preset_list = false;
                        power_preset = default_power_preset;
                        power_preset_display_mode = "Create";
                    }
                }

                if !show_power_preset_list  : create_power_preset_view := CreatePowerPresetView {
                    display_mode <=> power_preset_display_mode;
                    preset <=> power_preset;
                    width: 100%;
                    height: 100%;
                    cancel_operation => {
                        show_power_preset_list = true;
                    }
                    create_power_preset => {
                        debug("index.slint create power_preset", power_preset);
                        s2r_create_power_preset(power_preset);
                        show_power_preset_list = true;
                    }
                    update_power_preset => {
                        debug("index.slint update power_preset", power_preset);
                        s2r_update_power_preset(power_preset_index, power_preset);
                        show_power_preset_list = true;
                    }
                    changed_float(field_name, value) => {
                        debug("index.slint update power_preset power value");
                        power_preset = s2r_change_power_preset_float_value(power_preset, field_name, value);
                        return true;
                    }
                    changed_field(field_name, value) => {
                        debug("index.slint update power_preset", power_preset);
                        power_preset = s2r_check_power_preset_field(power_preset, field_name, value);
                        return true;
                    }
                }
            }
        }
        Tab {
            title: "Frequency Presets";
            Rectangle {
                if show_frequency_preset_list  : frequency_preset_list_view := FrequencyPresetListView {
                    presets <=> frequency_presets;
                    width: 100%;
                    height: 100%;
                    show_edit_frequency_preset(idx) => {
                        debug("Edit frequency_preset", idx);
                        frequency_preset_index = idx;
                        frequency_preset = frequency_presets[idx];
                        debug("Edit frequency_preset", frequency_preset);
                        show_frequency_preset_list = false;
                        frequency_preset_display_mode = "Update";
                    }
                    remove_frequency_preset(idx) => {
                        debug("index.slint remove frequency_preset:{idx}");
                        s2r_remove_frequency_preset(frequency_preset_index);
                    }
                    show_create_frequency_preset => {
                        show_frequency_preset_list = false;
                        frequency_preset = default_frequency_preset;
                        frequency_preset_display_mode = "Create";
                    }
                }

                if !show_frequency_preset_list  : create_frequency_preset_view := CreateFrequencyPresetView {
                    display_mode <=> frequency_preset_display_mode;
                    preset <=> frequency_preset;
                    width: 100%;
                    height: 100%;
                    cancel_operation => {
                        show_frequency_preset_list = true;
                    }
                    create_frequency_preset => {
                        debug("index.slint create frequency_preset", frequency_preset);
                        s2r_create_frequency_preset(frequency_preset);
                        show_frequency_preset_list = true;
                    }
                    update_frequency_preset => {
                        debug("index.slint update frequency_preset", frequency_preset);
                        s2r_update_frequency_preset(frequency_preset_index, frequency_preset);
                        show_frequency_preset_list = true;
                    }
                    changed_float(field_name, value) => {
                        debug("index.slint update frequency_preset frequency value");
                        frequency_preset = s2r_change_frequency_preset_float_value(frequency_preset, field_name, value);
                        return true;
                    }
                    changed_field(field_name, value) => {
                        debug("index.slint update frequency_preset", frequency_preset);
                        frequency_preset = s2r_check_frequency_preset_field(frequency_preset, field_name, value);
                        return true;
                    }
                }
            }
        }
        Tab {
            title: "Tasks";
            Rectangle {
                if show_task_list  : task_list_view := TaskListView {
                    tasks <=> tasks;
                    width: 100%;
                    height: 100%;
                    show_edit_task(idx) => {
                        debug("Edit task", idx);
                        task_index = idx;
                        task = tasks[idx];
                        debug("Edit task", task);
                        show_task_list = false;
                        task_display_mode = "Update";
                    }
                    remove_task(idx) => {
                        debug("index.slint remove task:{idx}");
                        s2r_remove_task(task_index);
                    }
                    show_create_task => {
                        show_task_list = false;
                        task = default_task;
                        task_display_mode = "Create";
                    }
                }

                if !show_task_list  : create_task_view := CreateTaskView {
                    display_mode <=> task_display_mode;
                    task <=> task;
                    width: 100%;
                    height: 100%;
                    cancel_operation => {
                        show_task_list = true;
                    }
                    create_task => {
                        debug("index.slint create task", task);
                        s2r_create_task(task);
                        show_task_list = true;
                    }
                    update_task => {
                        debug("index.slint update task", task);
                        s2r_update_task(task_index, task);
                        show_task_list = true;
                    }
                    changed_field(field_name, value) => {
                        debug("index.slint update task", task);
                        task = s2r_check_task_field(task, field_name, value);
                        return true;
                    }
                }
            }
        }
        // Tab {
        //     title: "Power Presets";
        //     Rectangle {
        //         // border-color: yellow;
        //         // border-width: 10px;
        //         // padding: 30px;
        //         x: -(PowerPresetNavigationAdapter.current-page * root.width);
        //         width: 2 * root.width;

        //         // if self.x > -root.width : MissionListView {
        //         if PowerPresetNavigationAdapter.current-page == 0  : PowerPresetListView {
        //             x: 0 + 10px;
        //             y: 10px;
        //             // padding: 20px;
        //             width: root.width - 20px;
        //             height: root.height - 35px;
        //         }

        //         // if self.x < 0 : CreateMissionView {
        //         if PowerPresetNavigationAdapter.current-page == 1  : CreatePowerPresetView {
        //             x: root.width + 20px;
        //             y: 10px;
        //             width: root.width - 40px;
        //             height: root.height - 35px;
        //         }

        //         animate x {
        //             duration: AnimationSettings.move-duration;
        //             easing: AnimationSettings.move-easing;
        //         }
        //     }
        // }
        // Tab {
        //     title: "Frequency Presets";
        //     Rectangle {
        //         // border-color: yellow;
        //         // border-width: 10px;
        //         // padding: 30px;
        //         x: -(FrequencyPresetNavigationAdapter.current-page * root.width);
        //         width: 2 * root.width;

        //         // if self.x > -root.width : MissionListView {
        //         if FrequencyPresetNavigationAdapter.current-page == 0  : FrequencyPresetListView {
        //             x: 0 + 10px;
        //             y: 10px;
        //             // padding: 20px;
        //             width: root.width - 20px;
        //             height: root.height - 35px;
        //         }

        //         // if self.x < 0 : CreateMissionView {
        //         if FrequencyPresetNavigationAdapter.current-page == 1  : CreateFrequencyPresetView {
        //             x: root.width + 20px;
        //             y: 10px;
        //             width: root.width - 40px;
        //             height: root.height - 35px;
        //         }

        //         animate x {
        //             duration: AnimationSettings.move-duration;
        //             easing: AnimationSettings.move-easing;
        //         }
        //     }
        // }
        // Tab {
        //     title: "Test Tasks";
        //     Rectangle {
        //         // border-color: yellow;
        //         // border-width: 10px;
        //         // padding: 30px;
        //         x: -(NavigationAdapter.current-page * root.width);
        //         width: 2 * root.width;

        //         // if self.x > -root.width : TaskListView {
        //         if NavigationAdapter.current-page == 0  : TaskListView {
        //             x: 0 + 10px;
        //             y: 10px;
        //             // padding: 20px;
        //             width: root.width - 20px;
        //             height: root.height - 35px;
        //         }

        //         // if self.x < 0 : CreateTaskView {
        //         if NavigationAdapter.current-page == 1  : CreateTaskView {
        //             x: root.width + 20px;
        //             y: 10px;
        //             width: root.width - 40px;
        //             height: root.height - 35px;
        //         }

        //         animate x {
        //             duration: AnimationSettings.move-duration;
        //             easing: AnimationSettings.move-easing;
        //         }
        //     }
        // }
    }

}
