import { CheckBox, ListView, HorizontalBox } from "std-widgets.slint";
import { StateLayer } from "./state_layer.slint";
import { FocusTouchArea } from "./focus_touch_area.slint";
import { SizeSettings, TodoPalette, FontSettings, Icons } from "styling.slint";
import { IconButton } from "icon_button.slint";
import { PowerPresetSlintStruct } from "../adapters/power_adapter.slint";

// @rust-attr(derive(serde::Serialize, serde::Deserialize))
// export struct PowerPresetSlintStruct {
//     preset_name: string,
//     preset_desc: string,
//     preset_details: string,
//     checked: bool,
// }

export component PowerPresetListViewItemDelegate {
    callback toggle;
    callback remove;
    callback edit_preset;

    in property <string> preset_name <=> preset_name-label.text;
    in property <string> preset_desc <=> preset_desc-label.text;
    in property <string> preset_details <=> preset_details-label.text;

    in-out property <bool> checked <=> check-box.checked;

    min-width: content-layer.min-width;
    min-height: max(SizeSettings.control-height, content-layer.min-height);
    forward-focus: touch-area;

    touch-area := FocusTouchArea {
        width: 100%;
        height: 100%;

        clicked => {
            root.toggle();
        }
    }

    StateLayer {
        width: 100%;
        height: 100%;
        focus-padding: -1px;
        pressed: touch-area.pressed || touch-area.enter-pressed;
        has-focus: touch-area.has-focus;
        has-hover: touch-area.has-hover;
    }

    content-layer := HorizontalBox {
        accessible-role: list-item;
        
        check-box := CheckBox {
            horizontal-stretch: 0;
            y: (parent.height - self.height) / 2;
            accessible-label: @tr("Preset Flagged");
            toggled => {
                root.toggle();
            }
            visible: false;
        }

        VerticalLayout {
            alignment: center;
            HorizontalLayout {
                preset_name-label := Text {
                    horizontal-alignment: left;
                    color: TodoPalette.foreground;
                    font-size: FontSettings.title1-strong.font-size;
                    font-weight: FontSettings.body-strong.font-weight;
                    overflow: elide;
                }

                preset_desc-label := Text {
                    color: TodoPalette.foreground;
                    font-size: FontSettings.body.font-size;
                    font-weight: FontSettings.body.font-weight;
                    overflow: elide;
                }
            }

            preset_details-label := Text {
                horizontal-alignment: left;
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                overflow: elide;
            }

        }

        IconButton {
            y: (parent.height - self.height) / 2;
            icon: Icons.settings;
            accessible-label: @tr("Edit Preset");
            clicked => {
                root.edit_preset();
            }
        }

        IconButton {
            y: (parent.height - self.height) / 2;
            icon: Icons.remove;
            accessible-label: @tr("Delete Preset");
            clicked => {
                root.remove();
            }
        }
    }
}

export component PowerPresetListView inherits ListView {
    in property <[PowerPresetSlintStruct]> xmodel;

    callback toggle(/* index */ int);
    callback remove(/* index */ int);
    callback edit_preset(/* index */ int);

    accessible-role: list;

    for item[index] in root.xmodel: PowerPresetListViewItemDelegate {
        width: root.visible-width;
        preset_name: item.preset_name;
        preset_desc: item.preset_desc;
        preset_details: item.preset_details;
        checked: item.checked;
        toggle => {
            root.toggle(index);
        }
        remove => {
            root.remove(index);
        }
        edit_preset => {
            root.edit_preset(index);
        }
    }
}
